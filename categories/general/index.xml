<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>General on Earthquake</title>
    <link>http://osrg.github.io/earthquake/categories/general/</link>
    <description>Recent content in General on Earthquake</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CopyrightÂ© 2015 Nippon Telegraph and Telephone Corporation</copyright>
    <lastBuildDate>Mon, 05 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://osrg.github.io/earthquake/categories/general/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Subprojects</title>
      <link>http://osrg.github.io/earthquake/subprojects/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://osrg.github.io/earthquake/subprojects/</guid>
      <description>

&lt;p&gt;These subprojects were originally developed for Earthquake, but we believe they can be also used for other purposes.&lt;/p&gt;

&lt;h3 id=&#34;hookswitch-a-usermode-packet-injection-library:c91eef9bf2ac1e96ec09a8a3562b6e3d&#34;&gt;HookSwitch: A Usermode Packet Injection Library&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/py/hookswitch&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/hookswitch.svg&#34; alt=&#34;PyPI version&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/osrg/hookswitch&#34;&gt;https://github.com/osrg/hookswitch&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hookfs-a-usermode-hookable-filesystem-library:c91eef9bf2ac1e96ec09a8a3562b6e3d&#34;&gt;HookFS: A Usermode Hookable Filesystem Library&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/osrg/hookfs&#34;&gt;https://github.com/osrg/hookfs&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://osrg.github.io/earthquake/gettingStarted/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://osrg.github.io/earthquake/gettingStarted/</guid>
      <description>

&lt;p&gt;All you have to do is make Docker installed on your host and run the pre-built Docker image &lt;a href=&#34;https://registry.hub.docker.com/u/osrg/earthquake/&#34;&gt;osrg/earthquake&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://registry.hub.docker.com/u/osrg/earthquake/&#34;&gt;&lt;img src=&#34;http://dockeri.co/image/osrg/earthquake&#34; alt=&#34;Docker Hub&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm --tty --interactive osrg/earthquake
INIT: Running without privileged mode. Please set EQ_DOCKER_PRIVILEGED if you want to use Ethernet Inspector
INIT: Earthquake is installed on /earthquake. Please refer to /earthquake/README.md
INIT: Starting command: [&#39;/bin/bash&#39;, &#39;--login&#39;, &#39;-i&#39;]
root@a0c2e4413483:/earthquake# ^D
INIT: Exiting with status 0..([&#39;/bin/bash&#39;, &#39;--login&#39;, &#39;-i&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you can do the things what you want in &lt;code&gt;/earthquake&lt;/code&gt; directory.
You might want to try several &lt;a href=&#34;https://github.com/osrg/earthquake/blob/master/example&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;privileged-mode-provides-docker-in-docker-open-vswitch-and-ryu:26fecfcca8d00993cd6180a70fec79aa&#34;&gt;Privileged Mode (provides Docker-in-Docker, Open vSwitch, and Ryu)&lt;/h2&gt;

&lt;p&gt;This mode might be useful for Ethernet Inspector.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo modprobe openvswitch
$ docker run --rm --tty --interactive --privileged -e EQ_DOCKER_PRIVILEGED=1 osrg/earthquake 
INIT: Running with privileged mode. Enabling DinD, OVS, and Ryu
INIT: Earthquake is installed on /earthquake. Please refer to /earthquake/README.md
INIT: Starting command: [&#39;wrapdocker&#39;, &#39;/init.dind-ovs-ryu.sh&#39;]
* /etc/openvswitch/conf.db does not exist
* Creating empty database /etc/openvswitch/conf.db
* Starting ovsdb-server
* Configuring Open vSwitch system IDs
* Starting ovs-vswitchd
* Enabling remote OVSDB managers
Assigned 192.168.42.254 to ovsbr0
root@907529be8b21:/earthquake# ^D
INIT: Exiting with status 0..([&#39;wrapdocker&#39;, &#39;/init.dind-ovs-ryu.sh&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/blob/master/README.md&#34;&gt;README file&lt;/a&gt; and &lt;a href=&#34;http://osrg.github.io/earthquake/earthquake/post/zookeeper-2212/&#34;&gt;this article&lt;/a&gt; are also good start points.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Earthquake</title>
      <link>http://osrg.github.io/earthquake/about/</link>
      <pubDate>Wed, 22 Jul 2015 14:18:43 +0900</pubDate>
      
      <guid>http://osrg.github.io/earthquake/about/</guid>
      <description>

&lt;p&gt;In short, the goal of earthquake project is providing a foundation of debugger for distributed systems.&lt;/p&gt;

&lt;p&gt;Developing and maintaining distributed systems is difficult.
The difficulty comes from many factors,
but we believe that one of the most important reasons is lacking of a good debugger for distributed systems specific bugs.&lt;/p&gt;

&lt;p&gt;What are the distributed systems specific bugs?
The bugs caused by hardware faults, non determinism of message ordering, and mix of them
(non distributed systems does not need to handle them).
Some researchers point out that real world systems (e.g. Hadoop) have such bugs,
which can cause terrible failures like data loss &lt;a href=&#34;https://www.usenix.org/conference/osdi14/technical-sessions/presentation/leesatapornwongsa&#34; title=&#34;Tanakorn Leesatapornwongsa, et al. SAMC: Semantic-Aware Model Checking for Fast Discovery of Deep Bugs in Cloud Systems. In Proc. of OSDI &#39;14.&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;https://www.usenix.org/legacy/event/nsdi09/tech/full_papers/yang/yang.pdf&#34; title=&#34;Junfeng Yang, et al. MODIST: Transparent Model Checking of Unmodified Distributed Systems. In Proc. of NSDI &#39;09.&#34;&gt;[3]&lt;/a&gt;.
They showed the existence of the bugs by building implementation level distributed system model checkers (DMCK).
The DMCKs have a capability of searching complex state space of protocols and injeting faults at critical timings.
In addition, they can work with actual implementation (not formal model &lt;a href=&#34;http://research.microsoft.com/en-us/um/people/lamport/tla/formal-methods-amazon.pdf&#34; title=&#34;Chris Newcombe, et al. Use of Formal Methods at Amazon Web Services. Amazon.com Technical Report, 2014.&#34;&gt;[2]&lt;/a&gt;) directly.&lt;/p&gt;

&lt;p&gt;earthquake is a framework for such DMCKs.
Its design does not depend on programming languages and opearting systems.
You can write your own state space search policy for your system.
We hope it will make your life a little bit easier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://osrg.github.io/earthquake/earthquake/images/overview.png&#34; alt=&#34;Overview&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;references:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/conference/osdi14/technical-sessions/presentation/leesatapornwongsa&#34; title=&#34;Tanakorn Leesatapornwongsa, et al. SAMC: Semantic-Aware Model Checking for Fast Discovery of Deep Bugs in Cloud Systems. In Proc. of OSDI &#39;14.&#34;&gt;Tanakorn Leesatapornwongsa, et al. SAMC: Semantic-Aware Model Checking for Fast Discovery of Deep Bugs in Cloud Systems. In Proc. of OSDI &amp;lsquo;14.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://research.microsoft.com/en-us/um/people/lamport/tla/formal-methods-amazon.pdf&#34; title=&#34;Chris Newcombe, et al. Use of Formal Methods at Amazon Web Services. Amazon.com Technical Report, 2014.&#34;&gt;Chris Newcombe, et al. Use of Formal Methods at Amazon Web Services. Amazon.com Technical Report, 2014.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/legacy/event/nsdi09/tech/full_papers/yang/yang.pdf&#34; title=&#34;Junfeng Yang, et al. MODIST: Transparent Model Checking of Unmodified Distributed Systems. In Proc. of NSDI &#39;09.&#34;&gt;Junfeng Yang, et al. MODIST: Transparent Model Checking of Unmodified Distributed Systems. In Proc. of NSDI &amp;lsquo;09.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>