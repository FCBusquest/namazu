<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Document on Earthquake</title>
    <link>http://osrg.github.io/earthquake/tags/document/</link>
    <description>Recent content in Document on Earthquake</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CopyrightÂ© 2015 Nippon Telegraph and Telephone Corporation</copyright>
    <lastBuildDate>Mon, 05 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://osrg.github.io/earthquake/tags/document/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Subprojects</title>
      <link>http://osrg.github.io/earthquake/subprojects/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://osrg.github.io/earthquake/subprojects/</guid>
      <description>

&lt;p&gt;These subprojects were originally developed for Earthquake, but we believe they can be also used for other purposes.&lt;/p&gt;

&lt;h3 id=&#34;hookswitch-a-usermode-packet-injection-library:c91eef9bf2ac1e96ec09a8a3562b6e3d&#34;&gt;HookSwitch: A Usermode Packet Injection Library&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/py/hookswitch&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/hookswitch.svg&#34; alt=&#34;PyPI version&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/osrg/hookswitch&#34;&gt;https://github.com/osrg/hookswitch&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hookfs-a-usermode-hookable-filesystem-library:c91eef9bf2ac1e96ec09a8a3562b6e3d&#34;&gt;HookFS: A Usermode Hookable Filesystem Library&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/osrg/hookfs&#34;&gt;https://github.com/osrg/hookfs&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZOOKEEPER-2080: flaky JUnit test</title>
      <link>http://osrg.github.io/earthquake/post/zookeeper-2080/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://osrg.github.io/earthquake/post/zookeeper-2080/</guid>
      <description>

&lt;h2 id=&#34;introduction:76efb5c48a34481fa50b4c096fa9081f&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;Apache Zookeeper&lt;/a&gt; is a highly available coordination service that is used by many distributed systems.
(See also &lt;a href=&#34;http://osrg.github.io/earthquake/earthquake/post/zookeeper-2212/&#34;&gt;our previous post about ZOOKEEPER-2212&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;ZooKeeper is comparatively matured, and well-tested with many JUnit scenarios.
However, due to its high non-determinism, some test scenarios are still flaky, plus it is very hard to identify the cause of such flaky bugs.&lt;/p&gt;

&lt;p&gt;Using Earthquake, we successfully reproduced the bug &lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-2080&#34;&gt;ZOOKEEPER-2080&lt;/a&gt; and analyzed its cause.&lt;/p&gt;

&lt;h2 id=&#34;the-bug:76efb5c48a34481fa50b4c096fa9081f&#34;&gt;The Bug&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-2080&#34;&gt;ZOOKEEPER-2080&lt;/a&gt; reports that the JUnit test &lt;code&gt;ReconfigRecoveryTest.testCurrentObserverIsParticipantInNewConfig&lt;/code&gt; fails intermittently.&lt;/p&gt;

&lt;p&gt;However, to the best of our knowledge, no one had successfully reproduced nor analyzed the bug for almost 2 years (since 2013), until we reproduced and analyzed with Earthquake.&lt;/p&gt;

&lt;p&gt;We found that the bug has been caused by a race condition in the &lt;code&gt;QuorumCnxManager&lt;/code&gt; class, which manages TCP sockets for leader election.&lt;/p&gt;

&lt;p&gt;Unfortunately, to fix the bug gracefully, drastic changes to &lt;code&gt;QuorumCnxManager&lt;/code&gt; (suggested since 2010: &lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-901&#34;&gt;ZOOKEEPER-901&lt;/a&gt;) might be needed.
We continue to look on the progress of ZOOKEEPER-901 and several related tickets such as &lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-900&#34;&gt;ZOOKEEPER-900&lt;/a&gt;, &lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-2164&#34;&gt;2164&lt;/a&gt; and &lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-2246&#34;&gt;2246&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-reproduce-the-bug-with-earthquake:76efb5c48a34481fa50b4c096fa9081f&#34;&gt;How to Reproduce the Bug with Earthquake&lt;/h2&gt;

&lt;p&gt;The bug can be easily reproduced by injecting several tens of millisecs sleeps to FLE (Fast Leader Election protocol) packets.
We did not have to permute packets explicitly.&lt;/p&gt;

&lt;p&gt;NOTE: In this test case, Earthquake uses Linux Netfilter queue (NFQ) to hook loopback traffic of the pseudo-distributed cluster. Our NFQ library is available as &lt;a href=&#34;https://github.com/osrg/hookswitch/&#34;&gt;osrg/hookswitch&lt;/a&gt;. HookSwitch can also hook OpenFlow packets, as &lt;a href=&#34;http://osrg.github.io/earthquake/earthquake/post/zookeeper-2212/&#34;&gt;we used in ZOOKEEPER-2212&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;set-up-earthquake-v0-1-2:76efb5c48a34481fa50b4c096fa9081f&#34;&gt;Set up Earthquake (v0.1.2)&lt;/h3&gt;

&lt;p&gt;For more information about setting up Earthquake, please refer to &lt;a href=&#34;https://github.com/osrg/earthquake/blob/v0.1.2/doc/how-to-setup-env.md&#34;&gt;doc/how-to-setup-env.md&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sh -c &#39;echo 0 &amp;gt; /proc/sys/net/ipv4/tcp_autocorking&#39; #recommended if Linux &amp;gt;= 3.14
$ docker run --rm --tty --interactive --privileged -e EQ_DOCKER_PRIVILEGED=1 osrg/earthquake:v0.1.2
docker$ export PYTHONPATH=/earthquake #BUG(Dockerfile): should be predefined in &amp;gt; v0.1.2
docker$ apt-get install ant-optional #BUG(Dockerfile): should be preinstalled in &amp;gt; v0.1.2
docker$ cd /earthquake/example/zk-repro-2080.nfqhook
docker$ ../../bin/earthquake init --force config.toml materials /tmp-zk-2080 #BUG(Dockerfile): in some envs, you may be unable to write in /tmp.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-experiments:76efb5c48a34481fa50b4c096fa9081f&#34;&gt;Run Experiments&lt;/h3&gt;

&lt;p&gt;First, confirm that ZooKeeper works fine with&lt;em&gt;out&lt;/em&gt; Earthquake (by setting &lt;code&gt;EQ_DISABLE&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker$ EQ_DISABLE=1 ../../bin/earthquake run /tmp-zk-2080
..
[junit] 2015-10-02 14:28:58,587 [myid:] - INFO  [main:ZKTestCase$1@65] - SUCCEEDED testCurrentObserverIsParticipantInNewConfig
..
validation succeed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can see that ZooKeeper almost always fails &lt;em&gt;with&lt;/em&gt; Earthquake.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker$ ../../bin/earthquake run /tmp-zk-2080
..
[junit] 2015-10-02 14:36:49,863 [myid:] - INFO  [main:ZKTestCase$1@70] - FAILED testCurrentObserverIsParticipantInNewConfig
[junit] java.lang.AssertionError: waiting for server 2 being up
..
validation failed: exit status 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the bug could not be reproduced, you might have to modify the &lt;code&gt;sleep&lt;/code&gt; parameter in &lt;code&gt;config.toml&lt;/code&gt;. (about 30 msecs to 80 msecs)&lt;/p&gt;

&lt;h3 id=&#34;analyze:76efb5c48a34481fa50b4c096fa9081f&#34;&gt;Analyze&lt;/h3&gt;

&lt;p&gt;Unlike we experienced in &lt;a href=&#34;http://osrg.github.io/earthquake/earthquake/post/zookeeper-2212/&#34;&gt;ZOOKEEPER-2212&lt;/a&gt;, neither Earthquake event history nor ZooKeeper logs were effective for analyzing cause of the bug.&lt;/p&gt;

&lt;p&gt;Instead, we compared branch patterns of Java codes using our new Earthquake Analyzer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker$ java -jar ../../bin/earthquake-analyzer.jar /tmp-zk-2080/ --classes-path /tmp-zk-2080/materials/zookeeper/build/classes
[DEBUG] net.osrg.earthquake.Analyzer - Scanning /tmp-zk-2080/00000000: experiment successful=true
[DEBUG] net.osrg.earthquake.Analyzer - Scanning /tmp-zk-2080/00000001: experiment successful=false
..
Suspicious: org.apache.zookeeper.server.quorum.FastLeaderElection::getVote line 805-805
Suspicious: org.apache.zookeeper.server.quorum.FastLeaderElection::lookForLeader line 919-919
Suspicious: org.apache.zookeeper.server.quorum.FastLeaderElection::lookForLeader line 939-941
Suspicious: org.apache.zookeeper.server.quorum.FastLeaderElection::lookForLeader line 945-945
Suspicious: org.apache.zookeeper.server.quorum.FastLeaderElection::lookForLeader line 949-949
Suspicious: org.apache.zookeeper.server.quorum.FastLeaderElection::lookForLeader line 951-952
Suspicious: org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerReceiver::run line 393-395
Suspicious: org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerReceiver::run line 403-404
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 808-809
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 812-814
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 816-816
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 818-818
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 823-825
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 830-830
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 833-834
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 837-839
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 870-870
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 878-880
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 882-882
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 884-884
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::queueCommittedProposals line 895-895
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::syncFollower line 744-746
Suspicious: org.apache.zookeeper.server.quorum.LearnerHandler::syncFollower line 748-748
Suspicious: org.apache.zookeeper.server.quorum.QuorumCnxManager::connectAll line 510-513
Suspicious: org.apache.zookeeper.server.quorum.QuorumCnxManager::connectAll line 515-515
Suspicious: org.apache.zookeeper.server.quorum.QuorumCnxManager::haveDelivered line 527-527
Suspicious: org.apache.zookeeper.server.quorum.QuorumCnxManager::haveDelivered line 529-529
Suspicious: org.apache.zookeeper.server.quorum.QuorumCnxManager::receiveConnection line 382-382
Suspicious: org.apache.zookeeper.server.quorum.QuorumCnxManager$Listener::run line 657-657
Suspicious: org.apache.zookeeper.server.quorum.QuorumCnxManager$SendWorker::run line 809-811
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Earthquake Analyzer picks up some branch patterns peculiar to failed experiments, and marks them &amp;ldquo;suspicious&amp;rdquo;.
Although the suspicious set can contain some misleading information, it is enough for approximation.&lt;/p&gt;

&lt;p&gt;As mentioned above, the bug seems caused by a race condition between a TCP packet arrival and &lt;code&gt;SendWorker&lt;/code&gt;/&lt;code&gt;RecvWorker&lt;/code&gt; lifecycle.&lt;/p&gt;

&lt;p&gt;Failed experiments tend to have a peculiar pattern of callling &lt;code&gt;SendWorker::finish()&lt;/code&gt; (and also &lt;code&gt;RecvWorker::finish()&lt;/code&gt;), e.g., calls from the branch &lt;a href=&#34;https://github.com/apache/zookeeper/blob/df7d56d25d38f872b5793af365ef732c4478eb1d/src/java/main/org/apache/zookeeper/server/quorum/QuorumCnxManager.java#L382&#34;&gt;&lt;code&gt;QuorumCnxManager::receiveConnection line 382-382&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When these peculiar calls to &lt;code&gt;SendWorker::finish()&lt;/code&gt; are commented out, the bug gets hard to be reproduced. It suggests that &lt;code&gt;SendWorker&lt;/code&gt;/&lt;code&gt;RecvWorker&lt;/code&gt; lifecycles matters.&lt;/p&gt;

&lt;p&gt;To fix the bug gracefully, using non-blocking TCP sockets (suggested in &lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-901&#34;&gt;ZOOKEEPER-901&lt;/a&gt;) might be needed.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:76efb5c48a34481fa50b4c096fa9081f&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We reproduced the flaky JUnit test bug &lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-2080&#34;&gt;ZOOKEEPER-2080&lt;/a&gt; and analyzed its cause using Earthquake.&lt;/p&gt;

&lt;p&gt;Lessons we learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just delaying packets is sometimes effective to reproduce flaky testcases.&lt;/li&gt;
&lt;li&gt;Branch pattern analysis is an easy and general method for narrowing bug-cause candidates, although we still need much more improvements to this.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://osrg.github.io/earthquake/gettingStarted/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://osrg.github.io/earthquake/gettingStarted/</guid>
      <description>

&lt;p&gt;All you have to do is make Docker installed on your host and run the pre-built Docker image &lt;a href=&#34;https://registry.hub.docker.com/u/osrg/earthquake/&#34;&gt;osrg/earthquake&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://registry.hub.docker.com/u/osrg/earthquake/&#34;&gt;&lt;img src=&#34;http://dockeri.co/image/osrg/earthquake&#34; alt=&#34;Docker Hub&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm --tty --interactive osrg/earthquake
INIT: Running without privileged mode. Please set EQ_DOCKER_PRIVILEGED if you want to use Ethernet Inspector
INIT: Earthquake is installed on /earthquake. Please refer to /earthquake/README.md
INIT: Starting command: [&#39;/bin/bash&#39;, &#39;--login&#39;, &#39;-i&#39;]
root@a0c2e4413483:/earthquake# ^D
INIT: Exiting with status 0..([&#39;/bin/bash&#39;, &#39;--login&#39;, &#39;-i&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, you can do the things what you want in &lt;code&gt;/earthquake&lt;/code&gt; directory.
You might want to try several &lt;a href=&#34;https://github.com/osrg/earthquake/blob/master/example&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;privileged-mode-provides-docker-in-docker-open-vswitch-and-ryu:26fecfcca8d00993cd6180a70fec79aa&#34;&gt;Privileged Mode (provides Docker-in-Docker, Open vSwitch, and Ryu)&lt;/h2&gt;

&lt;p&gt;This mode might be useful for Ethernet Inspector.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo modprobe openvswitch
$ docker run --rm --tty --interactive --privileged -e EQ_DOCKER_PRIVILEGED=1 osrg/earthquake 
INIT: Running with privileged mode. Enabling DinD, OVS, and Ryu
INIT: Earthquake is installed on /earthquake. Please refer to /earthquake/README.md
INIT: Starting command: [&#39;wrapdocker&#39;, &#39;/init.dind-ovs-ryu.sh&#39;]
* /etc/openvswitch/conf.db does not exist
* Creating empty database /etc/openvswitch/conf.db
* Starting ovsdb-server
* Configuring Open vSwitch system IDs
* Starting ovs-vswitchd
* Enabling remote OVSDB managers
Assigned 192.168.42.254 to ovsbr0
root@907529be8b21:/earthquake# ^D
INIT: Exiting with status 0..([&#39;wrapdocker&#39;, &#39;/init.dind-ovs-ryu.sh&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/blob/master/README.md&#34;&gt;README file&lt;/a&gt; and &lt;a href=&#34;http://osrg.github.io/earthquake/earthquake/post/zookeeper-2212/&#34;&gt;this article&lt;/a&gt; are also good start points.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZOOKEEPER-2212: distributed race condition</title>
      <link>http://osrg.github.io/earthquake/post/zookeeper-2212/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://osrg.github.io/earthquake/post/zookeeper-2212/</guid>
      <description>

&lt;h2 id=&#34;introduction:6404b3763f3a9572f2be258882d8c375&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;Apache Zookeeper&lt;/a&gt; is a highly available coordination service that is used by distributed systems such as &lt;a href=&#34;https://hadoop.apache.org/&#34;&gt;Hadoop(via YARN)&lt;/a&gt;, &lt;a href=&#34;http://spark.apache.org/&#34;&gt;Spark&lt;/a&gt;,  &lt;a href=&#34;http://mesos.apache.org/&#34;&gt;Mesos&lt;/a&gt;, &lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;, &lt;a href=&#34;http://hbase.apache.org/&#34;&gt;HBase&lt;/a&gt;, and many others.&lt;/p&gt;

&lt;p&gt;Using Earthquake, we found a distributed race-condition bug of ZooKeeper, which can lead to service unavailability.&lt;/p&gt;

&lt;p&gt;We reported the bug to ZooKeeper community (&lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-2212&#34;&gt;ZOOKEEPER-2212&lt;/a&gt;), and the bug is fixed in &lt;a href=&#34;https://github.com/apache/zookeeper/commit/ec056d3c3a18b862d0cd83296b7d4319652b0b1c&#34;&gt;commit ec056d (Jun 15, 2015)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-bug:6404b3763f3a9572f2be258882d8c375&#34;&gt;The Bug&lt;/h2&gt;

&lt;p&gt;We found a race-condition situation where an &amp;ldquo;observer&amp;rdquo; server keeps being an observer and cannot become a &amp;ldquo;participant&amp;rdquo;. &lt;a href=&#34;http://zookeeper.apache.org/doc/trunk/zookeeperReconfig.html#sc_reconfig_general&#34;&gt;(Document)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This race condition happens when an observer receives an &lt;code&gt;UPTODATE&lt;/code&gt; ZAB (ZooKeeper Atomic Broadcast protocl) packet from the leader:2888/tcp &lt;em&gt;after&lt;/em&gt; receiving a &lt;code&gt;Notification&lt;/code&gt; FLE (Fast Leader Election protocol) packet of which n.config version is larger than the observer&amp;rsquo;s one from leader:3888/tcp.&lt;/p&gt;

&lt;p&gt;Without Earthquake, we could not reproduce the bug in 5,000 experiments. (took about 60 hours)&lt;/p&gt;

&lt;h2 id=&#34;how-to-reproduce-the-bug-with-earthquake:6404b3763f3a9572f2be258882d8c375&#34;&gt;How to Reproduce the Bug with Earthquake&lt;/h2&gt;

&lt;h3 id=&#34;set-up-earthquake-v0-1-1:6404b3763f3a9572f2be258882d8c375&#34;&gt;Set up Earthquake (v0.1.1)&lt;/h3&gt;

&lt;p&gt;Please see &lt;a href=&#34;https://github.com/osrg/earthquake/blob/v0.1.1/doc/how-to-setup-env.md&#34;&gt;doc/how-to-setup-env.md&lt;/a&gt; for how to setup the environment.&lt;/p&gt;

&lt;p&gt;The use of pre-built Docker image &lt;code&gt;osrg/earthquake:v0.1.1&lt;/code&gt; is strongly recommended, which saves you the labor for setting up Open vSwitch and ryu.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo modprobe openvswitch # tested with Ubuntu 15.04 host (Linux kernel 3.19)
$ docker run --rm --tty --interactive --privileged -e EQ_DOCKER_PRIVILEGED=1 osrg/earthquake:v0.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, build ZooKeeper &amp;ldquo;Docker-in-Docker&amp;rdquo; containers, and initialize Earthquake as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker$ pip install git+https://github.com/twitter/zktraffic@68d9f85d8508e01f5d2f6657666c04e444e6423c  #(Jul 18, 2015)
docker$ export PYTHONPATH=/earthquake
docker$ cd /earthquake/example/zk-found-2212.ryu
docker$ ../../bin/earthquake init --force config.toml materials /tmp/zk-2212
[INFO] Checking whether Docker is installed
[INFO] Checking whether pipework is installed
[INFO] Checking whether ryu is installed
[INFO] Checking whether ovsbr0 is configured as 192.168.42.254
[INFO] Fetching ZooKeeper
[INFO] Checking out ZooKeeper@98a3cabfa279833b81908d72f1c10ee9f598a045
[INFO] You can change the ZooKeeper version by setting ZK_GIT_COMMIT
[INFO] Building Docker Image zk_testbed
ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Figure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+-------------------------------------------------------------+
|                                                             |
|  +---------------+   +---------------+   +---------------+  |
|  | Docker  (zk1) |   | Docker  (zk2) |   | Docker  (zk3) |  |
|  +---------------+   +---------------+   +---------------+  |
|          |                   |                   |          |
|  +-------------------------------------------------------+  |
|  |                Open vSwitch (and Ryu)                 |  |
|  +-------------------------------------------------------+  | 
|                              |                              |
|  +-------------------------------------------------------+  |
|  |                       Earthquake                      |  |
|  +-------------------------------------------------------+  | 
|                                                             |
|                  Docker  (osrg/earthquake)                  |
+-------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-experiments:6404b3763f3a9572f2be258882d8c375&#34;&gt;Run Experiments&lt;/h3&gt;

&lt;p&gt;After you have set up the environment, you can run experiments as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker$ ../../bin/earthquake run /tmp/zk-2212
[INFO] Checking PYTHONPATH
[INFO] Starting Earthquake Ethernet Switch
[INFO] Switch PID: 28893
[INFO] Starting Earthquake Ethernet Inspector
[INFO] Inspector PID: 28894
[INFO] Starting Docker container zk1 from zk_testbed
[INFO] Starting Docker container zk2 from zk_testbed
[INFO] Starting Docker container zk3 from zk_testbed
[INFO] Assigning 192.168.42.1/24 (ovsbr0) to zk1
[INFO] Assigning 192.168.42.2/24 (ovsbr0) to zk2
[INFO] Assigning 192.168.42.3/24 (ovsbr0) to zk3
[INFO] Starting ZooKeeper(sid=1) in Docker container zk1
[INFO] Starting ZooKeeper(sid=2) in Docker container zk2
[INFO] Starting ZooKeeper(sid=3) in Docker container zk3
[INFO] Sleeping(5 secs)..
[INFO] Checking FLE states
[IMPORTANT] Failure: 1 (/tmp/zk-2212/00000002/check-fle-states.log) # this failure means that the bug is reproduced
[INFO] Killing Docker container zk1 (log:/tmp/zk-2212/00000002/zk1)
[INFO] Killing Docker container zk2 (log:/tmp/zk-2212/00000002/zk2)
[INFO] Killing Docker container zk3 (log:/tmp/zk-2212/00000002/zk3)
[INFO] Killing Switch, PID: 28893
[INFO] Killing Inspector, PID: 28894
[INFO] result: 1
validation failed: exit status 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have to run the experiments for 3 or 5 times.&lt;/p&gt;

&lt;p&gt;You can check which experiment reproduced the bug as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker$ ../../bin/earthquake tools summary /tmp/zk-2212
Fri Jul 24 19:46:15 JST 2015 ...orage/naive/naive.go(142): a number of collected traces: 3
00000002 caused failure
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;experiment-0-https-github-com-osrg-earthquake-tree-v0-1-1-example-zk-found-2212-ryu-example-result-20150805-00000000-not-reproduced-the-bug:6404b3763f3a9572f2be258882d8c375&#34;&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000000&#34;&gt;Experiment #0&lt;/a&gt;: &lt;em&gt;not&lt;/em&gt; reproduced the bug&lt;/h3&gt;

&lt;p&gt;zk2 was successfully promoted to an observer to a participant, because it received &lt;code&gt;UpToDate&lt;/code&gt; before &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000000/actions/32.event.json&#34;&gt;32&lt;/a&gt;: zk1-&amp;gt;zk2: &lt;code&gt;UpToDate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000000/actions/36.event.json&#34;&gt;36&lt;/a&gt;: zk1&amp;lt;-zk2: &lt;code&gt;FollowerInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000000/actions/37.event.json&#34;&gt;37&lt;/a&gt;: zk1&amp;lt;-zk2: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000000/actions/39.event.json&#34;&gt;39&lt;/a&gt;: zk1-&amp;gt;zk2: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;zk3 was successfully promoted to an observer to a participant, because it received &lt;code&gt;UpToDate&lt;/code&gt; before &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000000/actions/20.event.json&#34;&gt;20&lt;/a&gt;: zk1-&amp;gt;zk3: &lt;code&gt;UpToDate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000000/actions/21.event.json&#34;&gt;21&lt;/a&gt;: zk1&amp;lt;-zk3: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000000/actions/23.event.json&#34;&gt;23&lt;/a&gt;: zk1-&amp;gt;zk3: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000000/actions/25.event.json&#34;&gt;25&lt;/a&gt;: zk1&amp;lt;-zk3: &lt;code&gt;FollowerInfo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;experiment-1-https-github-com-osrg-earthquake-tree-v0-1-1-example-zk-found-2212-ryu-example-result-20150805-00000001-not-reproduced-the-bug:6404b3763f3a9572f2be258882d8c375&#34;&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000001&#34;&gt;Experiment #1&lt;/a&gt;: &lt;em&gt;not&lt;/em&gt; reproduced the bug&lt;/h3&gt;

&lt;p&gt;zk2 was already a participant when it received &lt;code&gt;UpToDate&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000001/actions/19.event.json&#34;&gt;19&lt;/a&gt;: zk1&amp;lt;-zk2: &lt;code&gt;FollowerInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000001/actions/31.event.json&#34;&gt;31&lt;/a&gt;: zk1-&amp;gt;zk2: &lt;code&gt;UpToDate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;zk3 was successfully promoted to an observer to a participant, because it received &lt;code&gt;UpToDate&lt;/code&gt; before &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000001/actions/26.event.json&#34;&gt;26&lt;/a&gt;: zk1-&amp;gt;zk3: &lt;code&gt;UpToDate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000001/actions/29.event.json&#34;&gt;29&lt;/a&gt;: zk1&amp;lt;-zk3: &lt;code&gt;FollowerInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000001/actions/34.event.json&#34;&gt;34&lt;/a&gt;: zk1-&amp;gt;zk3: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000001/actions/37.event.json&#34;&gt;37&lt;/a&gt;: zk1&amp;lt;-zk3: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;experiment-2-https-github-com-osrg-earthquake-tree-v0-1-1-example-zk-found-2212-ryu-example-result-20150805-00000002-reproduced-the-bug-zk2-zk3:6404b3763f3a9572f2be258882d8c375&#34;&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000002&#34;&gt;Experiment #2&lt;/a&gt;: &lt;em&gt;reproduced&lt;/em&gt; the bug (zk2, zk3)&lt;/h3&gt;

&lt;p&gt;zk2 was not able to be promoted (please see above for the reason)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000002/actions/12.event.json&#34;&gt;12&lt;/a&gt;: zk1-&amp;gt;zk2: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000002/actions/19.event.json&#34;&gt;19&lt;/a&gt;: zk1-&amp;gt;zk2: &lt;code&gt;UpToDate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;FollowerInfo&lt;/code&gt; (zk1&amp;lt;-zk2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;zk3 was not able to be promoted (please see above for the reason)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000002/actions/10.event.json&#34;&gt;10&lt;/a&gt;: zk1-&amp;gt;zk3: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000002/actions/24.event.json&#34;&gt;24&lt;/a&gt;: zk1-&amp;gt;zk3: &lt;code&gt;UpToDate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;FollowerInfo&lt;/code&gt; (zk1&amp;lt;-zk3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;experiment-3-https-github-com-osrg-earthquake-tree-v0-1-1-example-zk-found-2212-ryu-example-result-20150805-00000003-reproduced-the-bug-zk3:6404b3763f3a9572f2be258882d8c375&#34;&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000003&#34;&gt;Experiment #3&lt;/a&gt;: &lt;em&gt;reproduced&lt;/em&gt; the bug (zk3)&lt;/h3&gt;

&lt;p&gt;zk2 was successfully promoted to an observer to a participant, because it received &lt;code&gt;UpToDate&lt;/code&gt; before &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000003/actions/24.event.json&#34;&gt;24&lt;/a&gt;: zk1-&amp;gt;zk2: &lt;code&gt;UpToDate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000003/actions/25.event.json&#34;&gt;25&lt;/a&gt;: zk1&amp;lt;-zk2: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000003/actions/27.event.json&#34;&gt;27&lt;/a&gt;: zk1-&amp;gt;zk2: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000003/actions/29.event.json&#34;&gt;29&lt;/a&gt;: zk1&amp;lt;-zk2: &lt;code&gt;FollowerInfo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;zk3 was not able to be promoted (please see above for the reason)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000003/actions/7.event.json&#34;&gt;7&lt;/a&gt;: zk1-&amp;gt;zk3: &lt;code&gt;Notification(config.version=100000000)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/tree/v0.1.1/example/zk-found-2212.ryu/example-result.20150805/00000003/actions/20.event.json&#34;&gt;20&lt;/a&gt;: zk1-&amp;gt;zk3: &lt;code&gt;UpToDate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;FollowerInfo&lt;/code&gt; (zk1&amp;lt;-zk3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusion:6404b3763f3a9572f2be258882d8c375&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We found a distributed race condition bug of ZooKeeper, and identified its cause using Earthquake.&lt;/p&gt;

&lt;p&gt;Through the experiments, we learned that the following points are important for implementing testing tool:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid false-positives&lt;/strong&gt;: i.e., the testing tool itself should not be bug-prone. False-positives complicates debugging. The authors of &lt;a href=&#34;https://www.usenix.org/legacy/event/nsdi09/tech/full_papers/yang/yang_html/&#34;&gt;MODIST&lt;/a&gt; [nsdi09] also alert this point.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don&amp;rsquo;t modify the target software&lt;/strong&gt;: Modification complicates testing multiple versions of the target software. Hence it is hard to check whether the bug got fixed in new releases. Earthquake realizes non-invasive test by inspecting and reordering packets at Ethernet switch side.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support identifying the root cause of bugs&lt;/strong&gt;: Just finding bugs is not enough for improving quality of the target software. The quality gets improved only after identifying the root cause of bugs, and fixing them. Earthquake provides event history storage for estimating bug causes. We are also planning to add support for analyzing branch-coverage data (e.g. using JaCoCo) so as to pick up suspicious branch patterns.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>_index</title>
      <link>http://osrg.github.io/earthquake/_index/</link>
      <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://osrg.github.io/earthquake/_index/</guid>
      <description>

&lt;h1 id=&#34;what-is-this:3976528693a0108357f4928017600865&#34;&gt;What is this?&lt;/h1&gt;

&lt;p&gt;In short, the goal of Earthquake project is providing a foundation of debugger for distributed systems.&lt;/p&gt;

&lt;p&gt;Developing and maintaining distributed systems is difficult.
The difficulty comes from many factors,
but we believe that one of the most important reasons is lacking of a good debugger for distributed systems specific bugs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://osrg.github.io/earthquake/earthquake/about/&#34;&gt;Read more..&lt;/a&gt;..&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://osrg.github.io/earthquake/earthquake/images/overview.png&#34; alt=&#34;Overview&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;found-reproduced-bugs:3976528693a0108357f4928017600865&#34;&gt;Found/Reproduced Bugs&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ZooKeeper:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Found &lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-2212&#34;&gt;ZOOKEEPER-2212&lt;/a&gt;: &lt;a href=&#34;http://osrg.github.io/earthquake/earthquake/post/zookeeper-2212/&#34;&gt;(blog article)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reproduced &lt;a href=&#34;https://issues.apache.org/jira/browse/ZOOKEEPER-2080&#34;&gt;ZOOKEEPER-2080&lt;/a&gt;: &lt;a href=&#34;http://osrg.github.io/earthquake/earthquake/post/zookeeper-2080/&#34;&gt;(blog article)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Etcd:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Found &lt;a href=&#34;https://github.com/coreos/etcd/issues/3517&#34;&gt;#3517&lt;/a&gt;, fixed in &lt;a href=&#34;https://github.com/coreos/etcd/pull/3530&#34;&gt;#3530&lt;/a&gt;: To Be Documented&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repro codes are located on &lt;a href=&#34;https://github.com/osrg/earthquake/tree/master/example&#34;&gt;earthquake/example&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;how-to-use:3976528693a0108357f4928017600865&#34;&gt;How to use?&lt;/h1&gt;

&lt;p&gt;Please refer to &lt;a href=&#34;http://osrg.github.io/earthquake/earthquake/gettingStarted/&#34;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/osrg/earthquake/blob/master/README.md&#34;&gt;README file&lt;/a&gt; and &lt;a href=&#34;http://osrg.github.io/earthquake/earthquake/post/zookeeper-2212/&#34;&gt;this article&lt;/a&gt; are also good start points.&lt;/p&gt;

&lt;h1 id=&#34;contact:3976528693a0108357f4928017600865&#34;&gt;Contact&lt;/h1&gt;

&lt;p&gt;The project is managed on &lt;a href=&#34;https://github.com/osrg/earthquake&#34;&gt;github&lt;/a&gt;.
&lt;a href=&#34;https://github.com/osrg/earthquake/pulls&#34;&gt;Pull requests&lt;/a&gt; and &lt;a href=&#34;https://github.com/osrg/earthquake/issues&#34;&gt;issues&lt;/a&gt; are welcome.
We are using &lt;a href=&#34;https://gitter.im/osrg/earthquake&#34;&gt;gitter&lt;/a&gt; for discussion.
Feel free to join.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gitter.im/osrg/earthquake?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg&#34; alt=&#34;Join the chat at https://gitter.im/osrg/earthquake&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello, world!</title>
      <link>http://osrg.github.io/earthquake/post/first/</link>
      <pubDate>Fri, 24 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://osrg.github.io/earthquake/post/first/</guid>
      <description>&lt;p&gt;Hello, world! In this blog, we&amp;rsquo;d like to share our ideas and
experiences related to testing and debugging distributed systems.&lt;/p&gt;

&lt;p&gt;Testing and debugging software is difficult. Especially, testing and
debugging distributed systems is known to be &lt;em&gt;very&lt;/em&gt; difficult. Why so
difficult? We believe the difficulty comes from lacking good tools for
the distributed systems specific bugs.&lt;/p&gt;

&lt;p&gt;Testing, debugging, and verification techniques for
removing bugs in software have a long history. Even programming is difficult task
since the beginning of its history, significant effort of researchers and
engineers is succeeding at establishing techniques for fighting
against major important bugs. For example, modern programming
languages tend to have their own GC mechanisms and they are very
effective for removing memory leak bugs. In addition, tools like
valgrind can help programmers to detect these bugs even software is
written in C or C++. Many other techniques were also established for
other types of bugs, so developing software seems to be becoming
easier than ancient days.&lt;/p&gt;

&lt;p&gt;However, times are changing. In these days, it is clear that
importance of a new category of software, distributed systems, is
rising. Although the idea of distributed systems is very old, its
modern implementations, e.g. Apache Hadoop, are introducing
significant benefit to today&amp;rsquo;s world. Distributed systems are
essentially different from non-distributed systems. They combine
multiple computers for highly availabile, highly durabile, and
scalable performant systems. As a result, they can enable new sort of
services called cloud computing and big data. Therefore everyone loves
these systems.&lt;/p&gt;

&lt;p&gt;Sadly, &lt;a href=&#34;http://ucare.cs.uchicago.edu/pdf/socc14-cbs.pdf&#34;&gt;recent studies&lt;/a&gt; shows that bugs in
the distributed systems are hard to detect and tend to introduce critical
failures e.g. permanent data loss. Of course distributed systems share
many types of bugs (e.g. memory leak, race conditions) with
non-distributed systems, so existing debugging
techniques are also effective for removing these bugs in the
systems. However, distributed systems have their own types of bugs and
the critical failures tend to be introduced by such bugs.&lt;/p&gt;

&lt;p&gt;What are the distributed systems specific bugs? Studies of this area
is in very early stage so there&amp;rsquo;s no mature categorization, but I can list
some classes which can be seen in many systems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;distributed race conditions caused by interleaving of messages over network&lt;/li&gt;
&lt;li&gt;incorrect handling of hardware e.g. disk failure, node failure, network partition&lt;/li&gt;
&lt;li&gt;performance degrading, especially a case of losing scalability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course all of the above three classes are critical, but first and
second ones are especially emergent because they are related to
correctness of systems. Incorrect systems are not valuable even
their performance is good.&lt;/p&gt;

&lt;p&gt;Though programming methodologies are evolving, these bugs remain hard
to be debugged because of lacking good tools. In succeeding posts, we
will describe the difficulties of the debugging, possible candidates
of solutions, and a tool we are working on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Earthquake</title>
      <link>http://osrg.github.io/earthquake/about/</link>
      <pubDate>Wed, 22 Jul 2015 14:18:43 +0900</pubDate>
      
      <guid>http://osrg.github.io/earthquake/about/</guid>
      <description>

&lt;p&gt;In short, the goal of earthquake project is providing a foundation of debugger for distributed systems.&lt;/p&gt;

&lt;p&gt;Developing and maintaining distributed systems is difficult.
The difficulty comes from many factors,
but we believe that one of the most important reasons is lacking of a good debugger for distributed systems specific bugs.&lt;/p&gt;

&lt;p&gt;What are the distributed systems specific bugs?
The bugs caused by hardware faults, non determinism of message ordering, and mix of them
(non distributed systems does not need to handle them).
Some researchers point out that real world systems (e.g. Hadoop) have such bugs,
which can cause terrible failures like data loss &lt;a href=&#34;https://www.usenix.org/conference/osdi14/technical-sessions/presentation/leesatapornwongsa&#34; title=&#34;Tanakorn Leesatapornwongsa, et al. SAMC: Semantic-Aware Model Checking for Fast Discovery of Deep Bugs in Cloud Systems. In Proc. of OSDI &#39;14.&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;https://www.usenix.org/legacy/event/nsdi09/tech/full_papers/yang/yang.pdf&#34; title=&#34;Junfeng Yang, et al. MODIST: Transparent Model Checking of Unmodified Distributed Systems. In Proc. of NSDI &#39;09.&#34;&gt;[3]&lt;/a&gt;.
They showed the existence of the bugs by building implementation level distributed system model checkers (DMCK).
The DMCKs have a capability of searching complex state space of protocols and injeting faults at critical timings.
In addition, they can work with actual implementation (not formal model &lt;a href=&#34;http://research.microsoft.com/en-us/um/people/lamport/tla/formal-methods-amazon.pdf&#34; title=&#34;Chris Newcombe, et al. Use of Formal Methods at Amazon Web Services. Amazon.com Technical Report, 2014.&#34;&gt;[2]&lt;/a&gt;) directly.&lt;/p&gt;

&lt;p&gt;earthquake is a framework for such DMCKs.
Its design does not depend on programming languages and opearting systems.
You can write your own state space search policy for your system.
We hope it will make your life a little bit easier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://osrg.github.io/earthquake/earthquake/images/overview.png&#34; alt=&#34;Overview&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;references:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/conference/osdi14/technical-sessions/presentation/leesatapornwongsa&#34; title=&#34;Tanakorn Leesatapornwongsa, et al. SAMC: Semantic-Aware Model Checking for Fast Discovery of Deep Bugs in Cloud Systems. In Proc. of OSDI &#39;14.&#34;&gt;Tanakorn Leesatapornwongsa, et al. SAMC: Semantic-Aware Model Checking for Fast Discovery of Deep Bugs in Cloud Systems. In Proc. of OSDI &amp;lsquo;14.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://research.microsoft.com/en-us/um/people/lamport/tla/formal-methods-amazon.pdf&#34; title=&#34;Chris Newcombe, et al. Use of Formal Methods at Amazon Web Services. Amazon.com Technical Report, 2014.&#34;&gt;Chris Newcombe, et al. Use of Formal Methods at Amazon Web Services. Amazon.com Technical Report, 2014.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/legacy/event/nsdi09/tech/full_papers/yang/yang.pdf&#34; title=&#34;Junfeng Yang, et al. MODIST: Transparent Model Checking of Unmodified Distributed Systems. In Proc. of NSDI &#39;09.&#34;&gt;Junfeng Yang, et al. MODIST: Transparent Model Checking of Unmodified Distributed Systems. In Proc. of NSDI &amp;lsquo;09.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>